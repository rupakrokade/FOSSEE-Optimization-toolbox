<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from intfminimax.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="intfminimax" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>intfminimax</refname>
    <refpurpose>Solves minimax constraint problem</refpurpose>
  </refnamediv>


<refsection>
   <title>Parameters</title>
   <variablelist>
        <varlistentry>
            <term>fun:</term>
            <listitem><para> The function to be minimized. fun is a function that accepts a vector x and returns a vector F, the objective functions evaluated at x.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>x0 :</term>
            <listitem><para> a vector of double, contains initial guess of variables.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>A :</term>
            <listitem><para> a matrix of double, represents the linear coefficients in the inequality constraints A⋅x ≤ b.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>intcon :</term>
            <listitem><para> a vector of integers, represents which variables are constrained to be integers</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>b :</term>
            <listitem><para> a vector of double, represents the linear coefficients in the inequality constraints A⋅x ≤ b.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>Aeq :</term>
            <listitem><para> a matrix of double, represents the linear coefficients in the equality constraints Aeq⋅x = beq.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>beq :</term>
            <listitem><para> a vector of double, represents the linear coefficients in the equality constraints Aeq⋅x = beq.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>lb :</term>
            <listitem><para> a vector of double, contains lower bounds of the variables.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>ub :</term>
            <listitem><para> a vector of double,  contains upper bounds of the variables.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>nonlinfun:</term>
            <listitem><para> function that computes the nonlinear inequality constraints c⋅x ≤ 0 and nonlinear equality constraints c⋅x = 0.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>xopt :</term>
            <listitem><para> a vector of double, the computed solution of the optimization problem.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>fopt :</term>
            <listitem><para> a double, the value of the function at x.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>maxfval:</term>
            <listitem><para> a 1x1 matrix of doubles, the maximum value in vector fval</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>exitflag :</term>
            <listitem><para> The exit status. See below for details.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>output :</term>
            <listitem><para> The structure consist of statistics about the optimization. See below for details.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>lambda :</term>
            <listitem><para> The structure consist of the Lagrange multipliers at the solution of problem. See below for details.</para></listitem>
        </varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
intfminimax minimizes the worst-case (largest) value of a set of multivariable functions, starting at an initial estimate. This is generally referred to as the minimax problem.
   </para>
   <para>
<latex>
\min_{x} \max_{i} F_{i}(x)\: \textrm{such that} \:\begin{cases}
&amp; c(x) \leq 0 \\
&amp; ceq(x) = 0 \\
&amp; A.x \leq b \\
&amp; Aeq.x = beq \\
&amp; lb \leq x \leq ub
&amp; x_i \in \!\, \mathbb{Z}, i \in \!\, I
\end{cases}
</latex>
   </para>
   <para>
Currently, intfminimax calls intfmincon which uses the bonmin algorithm.
   </para>
   <para>
max-min problems can also be solved with intfminimax, using the identity
   </para>
   <para>
<latex>
\max_{x} \min_{i} F_{i}(x) = -\min_{x} \max_{i} \left( -F_{i}(x) \right)
</latex>
   </para>
   <para>
The options allows the user to set various parameters of the Optimization problem.
It should be defined as type "list" and contains the following fields.
<itemizedlist>
<listitem>Syntax : options= list("IntegerTolerance", [---], "MaxNodes",[---], "MaxIter", [---], "AllowableGap",[---] "CpuTime", [---],"gradobj", "off", "hessian", "off" );</listitem>
<listitem>IntegerTolerance : a Scalar, a number with that value of an integer is considered integer..</listitem>
<listitem>MaxNodes : a Scalar, containing the Maximum Number of Nodes that the solver should search.</listitem>
<listitem>CpuTime : a Scalar, containing the Maximum amount of CPU Time that the solver should take.</listitem>
<listitem>AllowableGap : a Scalar, to stop the tree search when the gap between the objective value of the best known solution is reached.</listitem>
<listitem>MaxIter : a Scalar, containing the Maximum Number of Iteration that the solver should take.</listitem>
<listitem>gradobj : a string, to turn on or off the user supplied objective gradient.</listitem>
<listitem>hessian : a Scalar, to turn on or off the user supplied objective hessian.</listitem>
<listitem>Default Values : options = list('integertolerance',1d-06,'maxnodes',2147483647,'cputime',1d10,'allowablegap',0,'maxiter',2147483647,'gradobj',"off",'hessian',"off")</listitem>
</itemizedlist>
The objective function must have header :
<programlisting>
F = fun(x)
</programlisting>
where x is a n x 1 matrix of doubles and F is a m x 1 matrix of doubles where m is the total number of objective functions inside F.
On input, the variable x contains the current point and, on output, the variable F must contain the objective function values.
   </para>
   <para>
By default, the gradient options for intfminimax are turned off and and intfmincon does the gradient opproximation of objective function. In case the GradObj option is off and GradConstr option is on, intfminimax approximates Objective function gradient using numderivative toolbox.
   </para>
   <para>
If we can provide exact gradients, we should do so since it improves the convergence speed of the optimization algorithm.
   </para>
   <para>
   </para>
   <para>
The exitflag allows to know the status of the optimization which is given back by Ipopt.
<itemizedlist>
<listitem>exitflag=0 : Optimal Solution Found </listitem>
<listitem>exitflag=1 : InFeasible Solution.</listitem>
<listitem>exitflag=2 : Objective Function is Continuous Unbounded.</listitem>
<listitem>exitflag=3 : Limit Exceeded.</listitem>
<listitem>exitflag=4 : User Interrupt.</listitem>
<listitem>exitflag=5 : MINLP Error.</listitem>
</itemizedlist>
   </para>
   <para>
For more details on exitflag see the ipopt documentation, go to http://www.coin-or.org/bonmin/
   </para>
   <para>
</para>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
// A basic case :
// we provide only the objective function and the nonlinear constraint
// function
function f = myfun(x)
f(1)= 2*x(1)^2 + x(2)^2 - 48*x(1) - 40*x(2) + 304;     //Objectives
f(2)= -x(1)^2 - 3*x(2)^2;
f(3)= x(1) + 3*x(2) -18;
f(4)= -x(1) - x(2);
f(5)= x(1) + x(2) - 8;
endfunction
// The initial guess
x0 = [0.1,0.1];
// The expected solution : only 4 digits are guaranteed
xopt = [4 4]
fopt = [0 -64 -2 -8 0]
intcon = [1]
maxfopt = 0
// Run fminimax
[x,fval,maxfval,exitflag] = intfminimax(myfun, x0,intcon)
// Press ENTER to continue

   ]]></programlisting>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
// A case where we provide the gradient of the objective
// functions and the Jacobian matrix of the constraints.
// The objective function and its gradient
function [f,G] = myfun(x)
f(1)= 2*x(1)^2 + x(2)^2 - 48*x(1) - 40*x(2) + 304;
f(2)= -x(1)^2 - 3*x(2)^2;
f(3)= x(1) + 3*x(2) -18;
f(4)= -x(1) - x(2);
f(5)= x(1) + x(2) - 8;
G = [ 4*x(1) - 48, -2*x(1), 1, -1, 1;
2*x(2) - 40, -6*x(2), 3, -1, 1; ]'
endfunction
// The nonlinear constraints
function [c,ceq,DC,DCeq] = confun(x)
// Inequality constraints
c = [1.5 + x(1)*x(2) - x(1) - x(2), -x(1)*x(2) - 10]
// No nonlinear equality constraints
ceq=[]
DC= [x(2)-1, -x(2);
x(1)-1, -x(1)]'
DCeq = []'
endfunction
// Test with both gradient of objective and gradient of constraints
minimaxOptions = list("GradObj","on","GradCon","on");
// The initial guess
x0 = [0,10];
intcon = [2]
// Run intfminimax
[x,fval,maxfval,exitflag] = intfminimax(myfun,x0,intcon,[],[],[],[],[],[], confun, minimaxOptions)
   ]]></programlisting>
</refsection>

<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>Harpreet Singh</member>
   </simplelist>
</refsection>
</refentry>

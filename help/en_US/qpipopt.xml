<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from qpipopt.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="qpipopt" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>qpipopt</refname>
    <refpurpose>Solves a linear quadratic problem.</refpurpose>
  </refnamediv>


<refsynopsisdiv>
   <title>Calling Sequence</title>
   <synopsis>
   xopt = qpipopt(nbVar,nbCon,Q,p,LB,UB,conMatrix,conLB,conUB)
   [xopt,fopt,exitflag,output,lamda] = qpipopt( ... )
   
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Parameters</title>
   <variablelist>
   <varlistentry><term>nbVar :</term>
      <listitem><para> a 1 x 1 matrix of doubles, number of variables</para></listitem></varlistentry>
   <varlistentry><term>nbCon :</term>
      <listitem><para> a 1 x 1 matrix of doubles, number of constraints</para></listitem></varlistentry>
   <varlistentry><term>Q :</term>
      <listitem><para> a n x n matrix of doubles, where n is number of variables, represents coefficients of quadratic in the quadratic problem.</para></listitem></varlistentry>
   <varlistentry><term>p :</term>
      <listitem><para> a 1 x n matrix of doubles, where n is number of variables, represents coefficients of linear in the quadratic problem</para></listitem></varlistentry>
   <varlistentry><term>LB :</term>
      <listitem><para> a 1 x n matrix of doubles, where n is number of variables, contains lower bounds of the variables.</para></listitem></varlistentry>
   <varlistentry><term>UB :</term>
      <listitem><para> a 1 x n matrix of doubles, where n is number of variables, contains upper bounds of the variables.</para></listitem></varlistentry>
   <varlistentry><term>conMatrix :</term>
      <listitem><para> a m x n matrix of doubles, where n is number of variables and m is number of constraints, contains  matrix representing the constraint matrix</para></listitem></varlistentry>
   <varlistentry><term>conLB :</term>
      <listitem><para> a m x 1 matrix of doubles, where m is number of constraints, contains lower bounds of the constraints.</para></listitem></varlistentry>
   <varlistentry><term>conUB :</term>
      <listitem><para> a m x 1 matrix of doubles, where m is number of constraints, contains upper bounds of the constraints.</para></listitem></varlistentry>
   <varlistentry><term>xopt :</term>
      <listitem><para> a 1xn matrix of doubles, the computed solution of the optimization problem.</para></listitem></varlistentry>
   <varlistentry><term>fopt :</term>
      <listitem><para> a 1x1 matrix of doubles, the function value at x.</para></listitem></varlistentry>
   <varlistentry><term>exitflag :</term>
      <listitem><para> Integer identifying the reason the algorithm terminated.</para></listitem></varlistentry>
   <varlistentry><term>output :</term>
      <listitem><para> Structure containing information about the optimization.</para></listitem></varlistentry>
   <varlistentry><term>lambda :</term>
      <listitem><para> Structure containing the Lagrange multipliers at the solution x (separated by constraint type).</para></listitem></varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
Search the minimum of a constrained linear quadratic optimization problem specified by :
find the minimum of f(x) such that
   </para>
   <para>
<latex>
\begin{eqnarray}
&amp;\mbox{min}_{x}
&amp; 1/2*x'*Q*x + p'*x  \\
&amp; \text{subject to} &amp; conLB \leq C(x) \leq conUB \\
&amp; &amp; lb \leq x \leq ub \\
\end{eqnarray}
</latex>
   </para>
   <para>
We are calling IPOpt for solving the quadratic problem, IPOpt is a library written in C++. The code has been written by ​Andreas Wächter and ​Carl Laird.
   </para>
   <para>
</para>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//Find x in R^6 such that:

conMatrix= [1,-1,1,0,3,1;
-1,0,-3,-4,5,6;
2,5,3,0,1,0
0,1,0,1,2,-1;
-1,0,2,1,1,0];
conLB=[1 2 3 -%inf -%inf]';
conUB = [1 2 3 -1 2.5]';
//with  x between ci and cs:
lb=[-1000 -10000 0 -1000 -1000 -1000];
ub=[10000 100 1.5 100 100 1000];
//and minimize 0.5*x'*Q*x + p'*x with
p=[1;2;3;4;5;6]; Q=eye(6,6);
nbVar = 6;
nbCon = 5;
[xopt,fopt,exitflag,output,lambda]=qpipopt(nbVar,nbCon,Q,p,lb,ub,conMatrix,conLB,conUB)

   ]]></programlisting>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//min. -8*x1 -16*x2 + x1^2 + 4* x2^2
//  such that
//     x1 + x2 <= 5,
//     x1 <= 3,
//     x1 >= 0,
//     x2 >= 0
conMatrix= [1 1];
conLB=[-%inf];
conUB = [5];
//with  x between ci and cs:
lb=[0,0];
ub=[3,%inf];
//and minimize 0.5*x'*Q*x + p'*x with
p=[-8,-16];
Q=[1,0;0,4];
nbVar = 2;
nbCon = 1;
[xopt,fopt,exitflag,output,lambda] = qpipopt(nbVar,nbCon,Q,p,lb,ub,conMatrix,conLB,conUB)

   ]]></programlisting>
</refsection>

<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>Keyur Joshi, Saikiran, Iswarya, Harpreet Singh</member>
   </simplelist>
</refsection>
</refentry>

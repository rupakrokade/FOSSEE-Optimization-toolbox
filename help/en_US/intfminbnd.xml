<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from intfminbnd.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="intfminbnd" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>intfminbnd</refname>
    <refpurpose>Solves a multi-variable mixed integer non linear programming optimization problem on a bounded interval</refpurpose>
  </refnamediv>


<refsection>
   <title>Parameters</title>
   <variablelist>
        <varlistentry>
            <term>f :</term>
            <listitem><para> a function, representing the objective function of the problem</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>x1 :</term>
            <listitem><para> a vector, containing the lower bound of the variables.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>x2 :</term>
            <listitem><para> a vector, containing the upper bound of the variables.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>intcon :</term>
            <listitem><para> a vector of integers, represents which variables are constrained to be integers</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>options :</term>
            <listitem><para> a list, containing the option for user to specify. See below for details.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>xopt :</term>
            <listitem><para> a vector of doubles, containing the the computed solution of the optimization problem.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>fopt :</term>
            <listitem><para> a scalar of double, containing the the function value at x.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>exitflag :</term>
            <listitem><para> a scalar of integer, containing the flag which denotes the reason for termination of algorithm. See below for details.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>gradient :</term>
            <listitem><para> a vector of doubles, containing the Objective's gradient of the solution.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>hessian  :</term>
            <listitem><para> a matrix of doubles, containing the Objective's hessian of the solution.</para></listitem>
        </varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
Search the minimum of a multi-variable mixed integer non linear programming optimization on bounded interval specified by :
Find the minimum of f(x) such that
   </para>
   <para>
<latex>
\begin{eqnarray}
&amp;\mbox{min}_{x}
&amp; f(x)\\
&amp; \text{subject to} &amp; x1 \ &lt; x \ &lt; x2 \\
&amp; x_i \in \!\, \mathbb{Z}, i \in \!\, I
\end{eqnarray}
</latex>
   </para>
   <para>
The routine calls Bonmin for solving the Bounded Optimization problem, Bonmin is a library written in C++.
   </para>
   <para>
The options allows the user to set various parameters of the Optimization problem.
It should be defined as type "list" and contains the following fields.
<itemizedlist>
<listitem>Syntax : options= list("IntegerTolerance", [---], "MaxNodes",[---], "MaxIter", [---], "AllowableGap",[---] "CpuTime", [---],"gradobj", "off", "hessian", "off" );</listitem>
<listitem>IntegerTolerance : a Scalar, a number with that value of an integer is considered integer..</listitem>
<listitem>MaxNodes : a Scalar, containing the Maximum Number of Nodes that the solver should search.</listitem>
<listitem>CpuTime : a Scalar, containing the Maximum amount of CPU Time that the solver should take.</listitem>
<listitem>AllowableGap : a Scalar, to stop the tree search when the gap between the objective value of the best known solution is reached.</listitem>
<listitem>MaxIter : a Scalar, containing the Maximum Number of Iteration that the solver should take.</listitem>
<listitem>gradobj : a string, to turn on or off the user supplied objective gradient.</listitem>
<listitem>hessian : a Scalar, to turn on or off the user supplied objective hessian.</listitem>
<listitem>Default Values : options = list('integertolerance',1d-06,'maxnodes',2147483647,'cputime',1d10,'allowablegap',0,'maxiter',2147483647,'gradobj',"off",'hessian',"off")</listitem>
</itemizedlist>
   </para>
   <para>
The exitflag allows to know the status of the optimization which is given back by Ipopt.
<itemizedlist>
<listitem>exitflag=0 : Optimal Solution Found </listitem>
<listitem>exitflag=1 : Maximum Number of Iterations Exceeded. Output may not be optimal.</listitem>
<listitem>exitflag=2 : Maximum CPU Time exceeded. Output may not be optimal.</listitem>
<listitem>exitflag=3 : Stop at Tiny Step.</listitem>
<listitem>exitflag=4 : Solved To Acceptable Level.</listitem>
<listitem>exitflag=5 : Converged to a point of local infeasibility.</listitem>
</itemizedlist>
   </para>
   <para>
For more details on exitflag see the Bonmin documentation, go to http://www.coin-or.org/Bonmin
   </para>
   <para>
</para>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//Find x in R^6 such that it minimizes:
//f(x)= sin(x1) + sin(x2) + sin(x3) + sin(x4) + sin(x5) + sin(x6)
//-2 <= x1,x2,x3,x4,x5,x6 <= 2
//Objective function to be minimised
function y=f(x)
y=0;
for i =1:6
y=y+sin(x(i));
end
endfunction
//Variable bounds
x1 = [-2, -2, -2, -2, -2, -2];
x2 = [2, 2, 2, 2, 2, 2];
intcon = [2 3 4];
//Options
options=list("MaxIter",[1500],"CpuTime", [100])
[x,fval] =intfminbnd(f ,intcon, x1, x2, options)
// Press ENTER to continue

   ]]></programlisting>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//Find x in R such that it minimizes:
//f(x)= 1/x^2
//0 <= x <= 1000
//Objective function to be minimised
function y=f(x)
y=1/x^2;
endfunction
//Variable bounds
x1 = [0];
x2 = [1000];
intcon = [1];
[x,fval,exitflag,output,lambda] =intfminbnd(f,intcon , x1, x2)
// Press ENTER to continue

   ]]></programlisting>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//The below problem is an unbounded problem:
//Find x in R^2 such that it minimizes:
//f(x)= -[(x1-1)^2 + (x2-1)^2]
//-inf <= x1,x2 <= inf
//Objective function to be minimised
function y=f(x)
y=-((x(1)-1)^2+(x(2)-1)^2);
endfunction
//Variable bounds
x1 = [-%inf , -%inf];
x2 = [ %inf , %inf];
//Options
options=list("MaxIter",[1500],"CpuTime", [100])
intcon = [1 2];
[x,fval,exitflag,output,lambda] =intfminbnd(f,intcon, x1, x2, options)
   ]]></programlisting>
</refsection>

<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>Harpreet Singh</member>
   </simplelist>
</refsection>
</refentry>

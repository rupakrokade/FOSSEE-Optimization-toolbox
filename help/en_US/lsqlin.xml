<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from lsqlin.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="lsqlin" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>lsqlin</refname>
    <refpurpose>Solves a linear quadratic problem.</refpurpose>
  </refnamediv>


<refsynopsisdiv>
   <title>Calling Sequence</title>
   <synopsis>
   xopt = lsqlin(C,d,A,b)
   xopt = lsqlin(C,d,A,b,Aeq,beq)
   xopt = lsqlin(C,d,A,b,Aeq,beq,lb,ub)
   xopt = lsqlin(C,d,A,b,Aeq,beq,lb,ub,x0)
   xopt = lsqlin(C,d,A,b,Aeq,beq,lb,ub,x0,options)
   [xopt,resnorm,residual,exitflag,output,lambda] = lsqlin( ... )
   
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Input Parameters</title>
   <variablelist>
   <varlistentry><term>C :</term>
      <listitem><para> A matrix of doubles, representing the multiplier of x in the expression C⋅x - d. The number of columns in C is equal to the number of elements in x.</para></listitem></varlistentry>
   <varlistentry><term>d :</term>
      <listitem><para> A vector of doubles, representing the additive constant term in the expression C⋅x - d. The number of elements in d is equal to the number of rows in C matrix.</para></listitem></varlistentry>
   <varlistentry><term>A :</term>
      <listitem><para> A matrix of doubles, containing the coefficients of linear inequality constraints of size (m X n) where 'm' is the number of linear inequality constraints.</para></listitem></varlistentry>
   <varlistentry><term>b :</term>
      <listitem><para> A vector of doubles, related to 'A' and represents the linear coefficients in the linear inequality constraints of size (m X 1).</para></listitem></varlistentry>
   <varlistentry><term>Aeq :</term>
      <listitem><para> A matrix of doubles, containing the coefficients of linear equality constraints of size (m1 X n) where 'm1' is the number of linear equality constraints.</para></listitem></varlistentry>
   <varlistentry><term>beq :</term>
      <listitem><para> A vector of double, vector of doubles, related to 'Aeq' and represents the linear coefficients in the equality constraints of size (m1 X 1).</para></listitem></varlistentry>
   <varlistentry><term>lb :</term>
      <listitem><para> A vector of doubles, containing the lower bounds of the variables of size (1 X n) or (n X 1) where 'n' is the number of variables.</para></listitem></varlistentry>
   <varlistentry><term>ub :</term>
      <listitem><para> A vector of doubles, containing the upper bounds of the variables of size (1 X n) or (n X 1) where 'n' is the number of variables.</para></listitem></varlistentry>
   <varlistentry><term>x0 :</term>
      <listitem><para> A vector of doubles, containing the starting values of variables of size (1 X n) or (n X 1) where 'n' is the number of variables.</para></listitem></varlistentry>
    <varlistentry><term>options :</term>
      <listitem><para> A list, containing the option for user to specify. See below for details.</para></listitem></varlistentry>
 </variablelist>
</refsection>
<refsection>
<title> Outputs</title>
 <variablelist>
   <varlistentry><term>xopt :</term>
      <listitem><para> A vector of doubles, containing the computed solution of the optimization problem.</para></listitem></varlistentry>
   <varlistentry><term>resnorm :</term>
      <listitem><para> A double, containing the objective value returned as a scalar value norm(C⋅x-d)^2.</para></listitem></varlistentry>
   <varlistentry><term>residual :</term>
      <listitem><para> A vector of doubles, containing the solution residuals, returned as a vector d-C⋅x.</para></listitem></varlistentry>
   <varlistentry><term>exitflag :</term>
      <listitem><para> An integer, containing the flag which denotes the reason for termination of algorithm. See below for details.</para></listitem></varlistentry>
   <varlistentry><term>output :</term>
      <listitem><para> A structure, containing the information about the optimization. See below for details.</para></listitem></varlistentry>
   <varlistentry><term>lambda :</term>
      <listitem><para> A structure, containing the Lagrange multipliers of the lower bounds, upper bounds and constraints at the optimized point. See below for details.</para></listitem></varlistentry>
   </variablelist>
</refsection>
<refsection>
   <title>Description</title>
   <para>
Search the minimum of a constrained linear least square problem specified by:
   </para>
   <para>
<latex>
\begin{eqnarray}
\hspace{10pt} &amp;\mbox{min}_{x}
\hspace{10pt} &amp; 1/2||C⋅x - d||_2^2  \\
\hspace{10pt} &amp; \text{Subjected to: } &amp; A⋅x \leq b \\
\hspace{10pt} &amp; &amp; Aeq⋅x = beq \\
\hspace{10pt} &amp; &amp; lb \leq x \leq ub \\
\end{eqnarray}
</latex>
   </para>
   <para>
lsqlin calls Ipopt, an optimization library written in C++, to solve the linear least squares problem.
   </para>
  <para>
The options should be defined as type "list" and consist of the following fields:
</para>
  <para>
options= list("MaxIter", [---], "CpuTime", [---]);
   </para>
   <para>
<itemizedlist>
<listitem>MaxIter : A Scalar, specifying the maximum number of iterations that the solver should take.</listitem>
<listitem>CpuTime : A Scalar, specifying the maximum amount of CPU time in seconds that the solver should take.</listitem>
</itemizedlist>
   </para>
   <para>
   The default values for the various items are given as:
   </para>
   <para>
options = list("MaxIter", [3000], "CpuTime", [600]);
   </para>
   <para>
The exitflag allows the user to know the status of the optimization which is returned by Ipopt. The values it can take and what they indicate is described below:
<itemizedlist>
<listitem> 0 : Optimal Solution Found </listitem>
<listitem> 1 : Maximum Number of Iterations Exceeded. Output may not be optimal.</listitem>
<listitem> 2 : Maximum amount of CPU Time exceeded. Output may not be optimal.</listitem>
<listitem> 3 : Stop at Tiny Step.</listitem>
<listitem> 4 : Solved To Acceptable Level.</listitem>
<listitem> 5 : Converged to a point of local infeasibility.</listitem>
</itemizedlist>
   </para>
   <para>
For more details on exitflag, see the Ipopt documentation which can be found on http://www.coin-or.org/Ipopt/documentation/
   </para>
   <para>
The output data structure contains detailed information about the optimization process.
It is of type "struct" and contains the following fields.
<itemizedlist>
<listitem>output.iterations: The number of iterations performed.</listitem>
<listitem>output.constrviolation: The max-norm of the constraint violation.</listitem>
</itemizedlist>
   </para>
   <para>
The lambda data structure contains the Lagrange multipliers at the end of optimization. In the current version, the values are returned only when the the solution is optimal.
It has type "struct" and contains the following fields.
<itemizedlist>
<listitem>lambda.lower: The Lagrange multipliers for the lower bound constraints.</listitem>
<listitem>lambda.upper: The Lagrange multipliers for the upper bound constraints.</listitem>
<listitem>lambda.eqlin: The Lagrange multipliers for the linear equality constraints.</listitem>
<listitem>lambda.ineqlin: The Lagrange multipliers for the linear inequality constraints.</listitem>
</itemizedlist>
</para>
   <para>
</para>
</refsection>


<para>
A few examples displaying the various functionalities of lsqlin have been provided below. You will find a series of problems and the appropriate code snippets to solve them.
   </para>
<refsection>
   <title>Example</title>
   <para>
    We begin with a simple objective function subjected to three inequality constraints.
   </para>
   <para>
<latex>
\begin{eqnarray}
&amp;\mbox{min}_{x} 1/2||C⋅x - d||_2^2  \\
\end{eqnarray}
\\
\text{Where  C⋅x - d = }\:\begin{cases}
\begin{eqnarray}
\hspace{1pt} &amp;x_{1} + x_{2} + x_{3} - 89\\
\hspace{1pt} &amp;x_{1} + x_{2} - 67\\
\hspace{1pt} &amp;x_{2} + x_{3} - 53\\
\hspace{1pt} &amp;x_{1} - 35\\
\hspace{1pt} &amp;x_{3} - 20\\
\end{eqnarray}
\end{cases}
\\
&amp; \text{Subjected to:} \\
\begin{eqnarray}
\hspace{70pt} &amp;3x_{1} + 2x_{2} + x_{3}&amp;\leq 191\\ 
\hspace{70pt} &amp;2x_{1} + 3x_{2} + 4x_{3}&amp;\leq 209\\
\hspace{70pt} &amp;x_{1} + 2x_{2} + 3x_{3}&amp;\leq 162\\
\end{eqnarray}
</latex>
   </para>
   <para>
   </para>
   <programlisting role="example"><![CDATA[
//Example 1:An example with inequality constraints.
//Initializing C and D.
C = [1 1 1;
1 1 0;
0 1 1;
1 0 0;
0 0 1]
d = [89;
67;
53;
35;
20];
//We specify the linear inequality constraints below.
A = [3 2 1;
2 3 4;
1 2 3];
b = [191
209
162];
//Run lsqlin
[xopt,resnorm,residual,exitflag,output,lambda] = lsqlin(C,d,A,b);
   ]]></programlisting>
</refsection>

<refsection>
   <title>Example</title>
   <para>
    Here we build up on the previous example by adding equality constraints.
We add the following constraint to the problem specified above:
   </para>
   <para>
<latex>
\begin{eqnarray}
x_{1} + 2x_{2} + x_{3}&amp;= 10\\ 
\end{eqnarray}
</latex>
   </para>
   <para>
   </para>
   <programlisting role="example"><![CDATA[
//Example 2: Using  inequality and equality constraints.
//Initializing C and D.
C = [1 1 1;
1 1 0;
0 1 1;
1 0 0;
0 0 1]
d = [89;
67;
53;
35;
20];
//We specify the linear inequality constraints below.
A = [3 2 1;
2 3 4;
1 2 3];
b = [191
209
162];
//We specify the linear equality constraints below.
Aeq = [1 2 1];
beq = 10;
//Run lsqlin
[xopt,resnorm,residual,exitflag,output,lambda] = lsqlin(C,d,A,b,Aeq,beq)
   ]]></programlisting>
</refsection>

<refsection>
   <title>Example</title>
   <para>
    In this example, we proceed to add the upper and lower bounds to the objective function.
   </para>
   <para>
<latex>
\begin{eqnarray}
0.1 &amp;\leq x_{1} &amp;\leq 4\\
3 &amp;\leq x_{2} &amp;\leq 5\\
1 &amp;\leq x_{3} &amp;\leq 1
\end{eqnarray}
</latex>
   </para>
   <para>
   </para>
   <programlisting role="example"><![CDATA[
//Example 3: Using equality, inequality constraints and variable bounds
//Initializing C and D.
C = [1 1 1;
1 1 0;
0 1 1;
1 0 0;
0 0 1]
d = [89;
67;
53;
35;
20];
//We specify the linear inequality constraints below.
A = [3 2 1;
2 3 4;
1 2 3];
b = [191
209
162];
//We specify the linear equality constraints below.
Aeq = [1 2 1];
beq = 10;
//The upper and lower bounds for the objective function are defined in simple vectors as shown below.
lb = [0.1,3,1];
ub = [4,5,1];
//Run lsqlin
[xopt,resnorm,residual,exitflag,output,lambda] = lsqlin(C,d,A,b,Aeq,beq,lb,ub)
   ]]></programlisting>
</refsection>

<refsection>
   <title>Example</title>
   <para>
    In this example, we proceed to provide an initial value for x to facilitate the computation. We also further enhance the functionality of lsqlin by setting input options. This provides us with the ability to control the solver parameters such as the maximum number of solver iterations and the max. CPU time allowed for the computation.
   </para>
   <para>
   </para>
   <programlisting role="example"><![CDATA[
//Example 4: Using equality, inequality constraints and variable bounds, initializing x and options.
//Initializing C and D.
C = [1 1 1;
1 1 0;
0 1 1;
1 0 0;
0 0 1]
d = [89;
67;
53;
35;
20];
//We specify the linear inequality constraints below.
A = [3 2 1;
2 3 4;
1 2 3];
b = [191
209
162];
//We specify the linear equality constraints below.
Aeq = [1 2 1];
beq = 10;
//The upper and lower bounds for the objective function are defined in simple vectors as shown below.
lb = [0.1,3,1];
ub = [4,5,1];
//Initializing x.
x0 = [1,2,3]
//Setting the options
options = list("MaxIter", [5000], "CpuTime", [1000]);
//Run lsqlin
[xopt,resnorm,residual,exitflag,output,lambda] = lsqlin(C,d,A,b,Aeq,beq,lb,ub,x0,options)
   ]]></programlisting>
</refsection>

<refsection>
   <title>Example</title>
   <para>
    Infeasible Problems: Find x in R^3 such that it minimizes:
We add the following constraint to the objective function specified above:
   </para>
   <para>
<latex>
  \begin{eqnarray}
3x_{1} + 2x_{2} + x_{3}&amp;\leq 191\\ 
2x_{1} + 3x_{2} + 4x_{3}&amp;\leq 209\\
x_{1} + 2x_{2} + 3x_{3}&amp;\leq 162\\
\end{eqnarray}
\begin{eqnarray}
x_{1} + 2x_{2} + 3x_{3}&amp;= 200\\ 
\end{eqnarray}
</latex>
   </para>
   <para>
   </para>
   <programlisting role="example"><![CDATA[
//Example 5: Infeasible problem
//Initializing C and D.
C = [1 1 1;
1 1 0;
0 1 1;
1 0 0;
0 0 1]
d = [89;
67;
53;
35;
20];
//We specify the linear inequality constraints below.
A = [3 2 1;
2 3 4;
1 2 3];
b = [191
209
162];
//We specify the linear equality constraints below.
Aeq = [1 2 3];
beq = 200;
//Run lsqlin
[xopt,resnorm,residual,exitflag,output,lambda] = lsqlin(C,d,A,b,Aeq,beq)
   ]]></programlisting>
</refsection>

<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>Harpreet Singh</member>
   </simplelist>
</refsection>
</refentry>

<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from lsqlin.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="lsqlin" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>lsqlin</refname>
    <refpurpose>Solves a linear quadratic problem.</refpurpose>
  </refnamediv>


<refsynopsisdiv>
   <title>Calling Sequence</title>
   <synopsis>
   xopt = lsqlin(C,d,A,b)
   xopt = lsqlin(C,d,A,b,Aeq,beq)
   xopt = lsqlin(C,d,A,b,Aeq,beq,lb,ub)
   xopt = lsqlin(C,d,A,b,Aeq,beq,lb,ub,x0)
   xopt = lsqlin(C,d,A,b,Aeq,beq,lb,ub,x0,param)
   [xopt,resnorm,residual,exitflag,output,lambda] = lsqlin( ... )
   
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Parameters</title>
   <variablelist>
   <varlistentry><term>C :</term>
      <listitem><para> a matrix of double, represents the multiplier of the solution x in the expression C*x - d. Number of columns in C is equal to the number of elements in x.</para></listitem></varlistentry>
   <varlistentry><term>d :</term>
      <listitem><para> a vector of double, represents the additive constant term in the expression C*x - d. Number of elements in d is equal to the number of rows in C matrix.</para></listitem></varlistentry>
   <varlistentry><term>A :</term>
      <listitem><para> a vector of double, represents the linear coefficients in the inequality constraints</para></listitem></varlistentry>
   <varlistentry><term>b :</term>
      <listitem><para> a vector of double, represents the linear coefficients in the inequality constraints</para></listitem></varlistentry>
   <varlistentry><term>Aeq :</term>
      <listitem><para> a matrix of double, represents the linear coefficients in the equality constraints</para></listitem></varlistentry>
   <varlistentry><term>beq :</term>
      <listitem><para> a vector of double, represents the linear coefficients in the equality constraints</para></listitem></varlistentry>
   <varlistentry><term>lb :</term>
      <listitem><para> a vector of double, contains lower bounds of the variables.</para></listitem></varlistentry>
   <varlistentry><term>ub :</term>
      <listitem><para> a vector of double,  contains upper bounds of the variables.</para></listitem></varlistentry>
   <varlistentry><term>x0 :</term>
      <listitem><para> a vector of double, contains initial guess of variables.</para></listitem></varlistentry>
   <varlistentry><term>param :</term>
      <listitem><para> a list containing the the parameters to be set.</para></listitem></varlistentry>
   <varlistentry><term>xopt :</term>
      <listitem><para> a vector of double, the computed solution of the optimization problem.</para></listitem></varlistentry>
   <varlistentry><term>resnorm :</term>
      <listitem><para> a double, objective value returned as the scalar value norm(C*x-d)^2.</para></listitem></varlistentry>
   <varlistentry><term>residual :</term>
      <listitem><para> a vector of double, solution residuals returned as the vector d-C*x.</para></listitem></varlistentry>
   <varlistentry><term>exitflag :</term>
      <listitem><para> A flag showing returned exit flag from Ipopt. It could be 0, 1 or 2 etc. i.e. Optimal, Maximum Number of Iterations Exceeded, CPU time exceeded. Other flags one can see in the lsqlin macro.</para></listitem></varlistentry>
   <varlistentry><term>output :</term>
      <listitem><para> Structure containing information about the optimization. This version only contains number of iterations.</para></listitem></varlistentry>
   <varlistentry><term>lambda :</term>
      <listitem><para> Structure containing the Lagrange multipliers at the solution x (separated by constraint type).It contains lower, upper bound multiplier and linear equality, inequality constraint multiplier.</para></listitem></varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
Search the minimum of a constrained linear least square problem specified by :
   </para>
   <para>
<latex>
\begin{eqnarray}
&amp;\mbox{min}_{x}
&amp; 1/2||C⋅x - d||_2^2  \\
&amp; \text{subject to} &amp; A⋅x \leq b \\
&amp; &amp; Aeq⋅x = beq \\
&amp; &amp; lb \leq x \leq ub \\
\end{eqnarray}
</latex>
   </para>
   <para>
The routine calls Ipopt for solving the linear least square problem, Ipopt is a library written in C++.
   </para>
   <para>
</para>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//A simple linear least square example
C = [ 2 0;
-1 1;
0 2]
d = [1
0
-1];
A = [10 -2;
-2 10];
b = [4
-4];
[xopt,resnorm,residual,exitflag,output,lambda] = lsqlin(C,d,A,b)
// Press ENTER to continue

   ]]></programlisting>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//A basic example for equality, inequality constraints and variable bounds
C = [1 1 1;
1 1 0;
0 1 1;
1 0 0;
0 0 1]
d = [89;
67;
53;
35;
20;]
A = [3 2 1;
2 3 4;
1 2 3];
b = [191
209
162];
Aeq = [1 2 1];
beq = 10;
lb = repmat(0.1,3,1);
ub = repmat(4,3,1);
[xopt,resnorm,residual,exitflag,output,lambda] = lsqlin(C,d,A,b,Aeq,beq,lb,ub)
   ]]></programlisting>
</refsection>

<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>Harpreet Singh</member>
   </simplelist>
</refsection>
</refentry>

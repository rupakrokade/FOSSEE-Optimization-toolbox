<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from fgoalattain.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="fgoalattain" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>fgoalattain</refname>
    <refpurpose>Solves a multiobjective goal attainment problem</refpurpose>
  </refnamediv>


<refsynopsisdiv>
   <title>Calling Sequence</title>
   <synopsis>
   xopt = fgoalattain(fun,x0,goal,weight)
   xopt = fgoalattain(fun,x0,goal,weight,A,b)
   xopt = fgoalattain(fun,x0,goal,weight,A,b,Aeq,beq)
   xopt = fgoalattain(fun,x0,goal,weight,A,b,Aeq,beq,lb,ub)
   xopt = fgoalattain(fun,x0,goal,weight,A,b,Aeq,beq,lb,ub,nonlcon)
   xopt = fgoalattain(fun,x0,goal,weight,A,b,Aeq,beq,lb,ub,nonlcon,options)
   [xopt,fval] = fgoalattain(...)
   [xopt,fval,attainfactor] = fgoalattain(...)
   [xopt,fval,attainfactor,exitflag] = fgoalattain(...)
   [xopt,fval,attainfactor,exitflag,output] = fgoalattain(...)
   [xopt,fval,attainfactor,exitflag,output,lambda] = fgoalattain(...)
   
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Input Parameters</title>
   <variablelist>
   <varlistentry><term>fun:</term>
      <listitem><para> A function that accepts a vector x as input and returns the value of objective function at x.</para></listitem></varlistentry>
   <varlistentry><term>x0 :</term>
      <listitem><para> A vector of doubles, containing the starting values of variables of size (1 X n) or (n X 1) where 'n' is the number of variables.</para></listitem></varlistentry>
      <varlistentry><term>goal :</term>
      <listitem><para> A vector of doubles, containing the goals, which are the values the objective functions are supposed to achieve.</para></listitem></varlistentry>
      <varlistentry><term>weights:</term>
      <listitem><para> A vector of doubles, containing the weights assigned to each objective function.</para></listitem></varlistentry>
   <varlistentry><term>A :</term>
      <listitem><para> A matrix of doubles, containing the coefficients of linear inequality constraints of size (m X n) where 'm' is the number of linear inequality constraints.</para></listitem></varlistentry>
   <varlistentry><term>b :</term>
      <listitem><para> A vector of doubles, related to 'A' and represents the linear coefficients in the linear inequality constraints of size (m X 1).</para></listitem></varlistentry>
   <varlistentry><term>Aeq :</term>
      <listitem><para> A matrix of doubles, containing the coefficients of linear equality constraints of size (m1 X n) where 'm1' is the number of linear equality constraints.</para></listitem></varlistentry>
   <varlistentry><term>beq :</term>
      <listitem><para>A vector of double, vector of doubles, related to 'Aeq' and represents the linear coefficients in the equality constraints of size (m1 X 1)</para></listitem></varlistentry>
   <varlistentry><term>lb :</term>
      <listitem><para> A vector of doubles, containing the lower bounds of the variables of size (1 X n) or (n X 1) where 'n' is the number of variables.</para></listitem></varlistentry>
   <varlistentry><term>ub :</term>
      <listitem><para> A vector of doubles, containing the upper bounds of the variables of size (1 X n) or (n X 1) where 'n' is the number of variables.</para></listitem></varlistentry>
   <varlistentry><term>nonlcon:</term>
      <listitem><para> A function, representing the Non-linear Constraints functions(both Equality and Inequality) of the problem. It is declared in such a way that non-linear inequality constraints (c), and the non-linear equality constraints (ceq) are defined as separate single row vectors.</para></listitem></varlistentry>
   <varlistentry><term>options :</term>
      <listitem><para> A list, containing the option for user to specify. See below for details.</para></listitem></varlistentry>
       </variablelist>
</refsection>
<refsection>
<title> Outputs</title>
 <variablelist>
   <varlistentry><term>xopt :</term>
      <listitem><para> A vector of doubles, containing the computed solution of the optimization problem.</para></listitem></varlistentry>
   <varlistentry><term>fval :</term>
      <listitem><para> A vector of doubles, containing the values of the objective functions at the end of the optimization problem.</para></listitem></varlistentry>
   <varlistentry><term>attainfactor:</term>
      <listitem><para> The amount of over or underachievement of the goals (<latex>\gamma</latex>) at the solution.</para></listitem></varlistentry>
   <varlistentry><term>exitflag :</term>
      <listitem><para> An integer, containing the flag which denotes the reason for termination of algorithm. See below for details.</para></listitem></varlistentry>
   <varlistentry><term>output :</term>
      <listitem><para>  A structure, containing the information about the optimization. See below for details.</para></listitem></varlistentry>
   <varlistentry><term>lambda :</term>
      <listitem><para> A structure, containing the Lagrange multipliers of lower bound, upper bound and constraints at the optimized point. See below for details.</para></listitem></varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
fgoalattain solves the goal attainment problem, which is a formulation for minimizing a multiobjective optimization problem. Find the minimum of a problem specified by:
</para>
   <para>
Minimise <latex>\gamma</latex> such that:
   </para>
   <para>
<latex>
\begin{eqnarray}
&amp;\mbox{min}_{x,\gamma}  x\\
\end{eqnarray}
\\&amp;\text{Subjected to:}\\
\begin{eqnarray}
&amp; &amp; F(x)-weight \boldsymbol{\cdot} \gamma \leq goal \\
&amp; &amp; A\boldsymbol{\cdot} x \leq b \\
&amp; &amp;A_{eq}\boldsymbol{\cdot} {x}  = b_{eq}\\
&amp; &amp;c(x) \leq  0\\
&amp; &amp;c_{eq}(x) \ =  0\\
&amp; &amp;lb \leq x \leq ub \\
\end{eqnarray}
</latex>
   </para>
   <para>
   </para>
   <para>
The solver makes use of fmincon, which uses the Ipopt solver, an optimization library written in C++, to solve the problem.
   </para>
<title>Options</title>
<para>
The options allow the user to set various parameters of the Optimization problem. The syntax for the options is given by:
   </para>
   <para>
options= list("MaxIter", [---], "CpuTime", [---], "GradObj", ---, "Hessian", ---, "GradCon", ---);
   </para>
   <para>
The options should be defined as type "list" and consist of the following fields:
<itemizedlist>
<listitem>MaxIter : A Scalar, specifying the maximum number of iterations that the solver should take.</listitem>
<listitem>CpuTime : A Scalar, specifying the maximum amount of CPU time in seconds that the solver should take.</listitem>
<listitem>GradObj : A function, representing the gradient function of the Objective in Vector Form.</listitem>
<listitem>GradCon : A function, representing the gradient of the Non-Linear Constraints (both Equality and Inequality) of the problem. It is declared in such a way that gradient of non-linear inequality constraints are defined first as a separate Matrix (cg of size m2 X n or as an empty), followed by gradient of non-linear equality constraints as a separate matrix (ceqg of size m2 X n or as an empty) where m2 &amp;amp; m3 are number of non-linear inequality and equality constraints respectively.</listitem>
</itemizedlist>
The default values for the various items are given as:
   </para>
   <para>
options = list("MaxIter", [3000], "CpuTime", [600]);
   </para>
  
  <para>
The exitflag allows the user to know the status of the optimization which is returned by Ipopt. The values it can take and what they indicate is described below:
<itemizedlist>
<listitem> 0 : Optimal Solution Found </listitem>
<listitem> 1 : Maximum Number of Iterations Exceeded. Output may not be optimal.</listitem>
<listitem> 2 : Maximum amount of CPU Time exceeded. Output may not be optimal.</listitem>
<listitem> 3 : Stop at Tiny Step.</listitem>
<listitem> 4 : Solved To Acceptable Level.</listitem>
<listitem> 5 : Converged to a point of local infeasibility.</listitem>
</itemizedlist>
   </para>
   <para>
For more details on exitflag, see the Ipopt documentation which can be found on http://www.coin-or.org/Ipopt/documentation/
   </para>
   <para>
The output data structure contains detailed information about the optimization process.
It is of type "struct" and contains the following fields.
<itemizedlist>
<listitem>output.Iterations: The number of iterations performed.</listitem>
<listitem>output.Cpu_Time  : The total cpu-time taken.</listitem>
<listitem>output.Objective_Evaluation: The number of Objective Evaluations performed.</listitem>
<listitem>output.Dual_Infeasibility  : The Dual Infeasiblity of the final soution.</listitem>
<listitem>output.Message: The output message for the problem.</listitem>
</itemizedlist>
   </para>
    <para>
The lambda data structure contains the Lagrange multipliers at the end of optimization. In the current version the values are returned only when the the solution is optimal.
It has type "struct" and contains the following fields.
<itemizedlist>
<listitem>lambda.lower: The Lagrange multipliers for the lower bound constraints.</listitem>
<listitem>lambda.upper: The Lagrange multipliers for the upper bound constraints.</listitem>
<listitem>lambda.eqlin: The Lagrange multipliers for the linear equality constraints.</listitem>
<listitem>lambda.ineqlin: The Lagrange multipliers for the linear inequality constraints.</listitem>
<listitem>lambda.eqnonlin: The Lagrange multipliers for the non-linear equality constraints.</listitem>
<listitem>lambda.ineqnonlin: The Lagrange multipliers for the non-linear inequality constraints.</listitem>
</itemizedlist>
   </para>
   <para>
</para>
</refsection>

<para>
A few examples displaying the various functionalities of fgoalattain have been provided below. You will find a series of problems and the appropriate code snippets to solve them.
   </para>
<refsection>
   <title>Example</title>
 Here we solve a simple objective function, subjected to no constraints.
<para>
<latex>
\begin{eqnarray}
\qquad \qquad \qquad \mbox{min}_{x,\gamma}  \gamma
\end{eqnarray}
\\
\text{Such that:}\\
\begin{eqnarray}
\qquad &amp; F(x)-weight \boldsymbol{\cdot} \gamma \leq goal \\
\end{eqnarray}
\\
\text{Where  F(x) = }\:\begin{cases}
\begin{eqnarray}
&amp;f_{1}(x) &amp;= 2 \boldsymbol{\cdot} x_{1}^{2} + x_{2}^{2} - 48x_{1} - 40x_{2} + 304\\
&amp;f_{2}(x) &amp;= -x_{1}^{2} - 3x_{2}^{2}\\
&amp;f_{3}(x) &amp;= x_{1} + 3x_{2} - 18\\
&amp;f_{4}(x) &amp;= -x_{1} - x_{2}\\
&amp;f_{5}(x) &amp;= x_{1} + x_{2} - 8
\end{eqnarray}
\end{cases}

</latex>
   </para>
   <para>

   </para>
   <programlisting role="example"><![CDATA[
//Example 1:
// Objective function
function f1 = gattainObjfun(x)
f1(1)=2*x(1)*x(1)+x(2)*x(2)-48*x(1)-40*x(2)+304
f1(2)=-x(1)*x(1)-3*x(2)*x(2)
f1(3)=x(1)+3*x(2)-18
f1(4)=-x(1)-x(2)
f1(5)=x(1)+x(2)-8
endfunction
// The initial guess
x0=[-1,1];
//Specifying the goal and the weights
goal=[-5,-3,-2,-1,-4];
weight=abs(goal)
//Run fgoalattain
[x,fval,attainfactor,exitflag,output,lambda]=fgoalattain(gattainObjfun,x0,goal,weight)
   ]]></programlisting>
</refsection>

<refsection>
   <title>Example</title>
 We proceed to add simple linear inequality constraints.
 <para>
<latex>
\begin{eqnarray}
\hspace{70pt} &amp;x_{1} + x_{2}&amp;\leq 2\\ 
\hspace{70pt} &amp;x_{1} + x_{2}/4&amp;\leq 1\\
\hspace{70pt} &amp;-x_{1} + x_{2}&amp;\geq -1\\
\end{eqnarray}
</latex>
</para>
   <para>

   </para>
   <programlisting role="example"><![CDATA[
//Example 2:
// Objective function
function f1 = gattainObjfun(x)
f1(1)=2*x(1)*x(1)+x(2)*x(2)-48*x(1)-40*x(2)+304
f1(2)=-x(1)*x(1)-3*x(2)*x(2)
f1(3)=x(1)+3*x(2)-18
f1(4)=-x(1)-x(2)
f1(5)=x(1)+x(2)-8
endfunction
// The initial guess
x0=[-1,1];
//Specifying the goal and the weights
goal=[-5,-3,-2,-1,-4];
weight=abs(goal)
//Linear Inequality constraints
A=[1,1 ; 1,1/4 ; 1,-1];
b=[2;1;1];
//Run fgoalattain
[x,fval,attainfactor,exitflag,output,lambda]=fgoalattain(gattainObjfun,x0,goal,weight,A,b)
   ]]></programlisting>
</refsection>

<refsection>
   <title>Example</title>
Here we build up on the previous example by adding linear equality constraints.
We add the following constraints to the problem specified above: <para>
<latex>
\begin{eqnarray}
&amp;x_{1} - x_{2}&amp;= 1 
\\&amp;2x_{1} + x_{2}&amp;= 2
\end{eqnarray}
</latex>
</para>
   <para>

   </para>
   <programlisting role="example"><![CDATA[
//Example 3:
// Objective function
function f1 = gattainObjfun(x)
f1(1)=2*x(1)*x(1)+x(2)*x(2)-48*x(1)-40*x(2)+304
f1(2)=-x(1)*x(1)-3*x(2)*x(2)
f1(3)=x(1)+3*x(2)-18
f1(4)=-x(1)-x(2)
f1(5)=x(1)+x(2)-8
endfunction
// The initial guess
x0=[-1,1];
//Specifying the goal and the weights
goal=[-5,-3,-2,-1,-4];
weight=abs(goal)
//Linear Inequality constraints
A=[1,1 ; 1,1/4 ; 1,-1];
b=[2;1;1];
//We specify the linear equality constraints below.
Aeq = [1,-1; 2, 1];
beq =  [1;2];
//Run fgoalattain
[x,fval,attainfactor,exitflag,output,lambda]=fgoalattain(gattainObjfun,x0,goal,weight,A,b,Aeq,beq)
   ]]></programlisting>
</refsection>

<refsection>
   <title>Example</title>
In this example, we proceed to add the upper and lower bounds to the objective function.
 <para>
<latex>
\begin{eqnarray}
-1 &amp;\leq x_{1} &amp;\leq \infty\\
-\infty &amp;\leq x_{2} &amp;\leq 1
\end{eqnarray}
</latex>
</para>
   <para>

   </para>
   <programlisting role="example"><![CDATA[
//Example 4:
// Objective function
function f1 = gattainObjfun(x)
f1(1)=2*x(1)*x(1)+x(2)*x(2)-48*x(1)-40*x(2)+304
f1(2)=-x(1)*x(1)-3*x(2)*x(2)
f1(3)=x(1)+3*x(2)-18
f1(4)=-x(1)-x(2)
f1(5)=x(1)+x(2)-8
endfunction
// The initial guess
x0=[-1,1];
//Specifying the goal and the weights
goal=[-5,-3,-2,-1,-4];
weight=abs(goal)
//Linear Inequality constraints
A=[1,1 ; 1,1/4 ; 1,-1];
b=[2;1;1];
//We specify the linear equality constraints below.
Aeq = [1,-1; 2, 1];
beq =  [1;2];
//The upper and lower bounds for the objective function are defined in simple vectors as shown below.
lb = [-1;-%inf];
ub = [%inf;1];    //
//Run fgoalattain
[x,fval,attainfactor,exitflag,output,lambda]=fgoalattain(gattainObjfun,x0,goal,weight,A,b,Aeq,beq,lb,ub)
   ]]></programlisting>
</refsection>


<refsection>
   <title>Example</title>
Finally, we add the non-linear constraints to the problem. Note that there is a notable difference in the way this is done as compared to defining the linear constraints.
 <para>
<latex>
\begin{eqnarray}
x_{1}^2-5&amp;\leq 0\\
x_{1}^2+x_{2}^{2}-8&amp;\leq 0\\
\end{eqnarray}
</latex>
</para>
   <para>

   </para>
   <programlisting role="example"><![CDATA[
//Example 5:
// Objective function
function f1 = gattainObjfun(x)
f1(1)=2*x(1)*x(1)+x(2)*x(2)-48*x(1)-40*x(2)+304
f1(2)=-x(1)*x(1)-3*x(2)*x(2)
f1(3)=x(1)+3*x(2)-18
f1(4)=-x(1)-x(2)
f1(5)=x(1)+x(2)-8
endfunction
// The initial guess
x0=[-1,1];
//Specifying the goal and the weights
goal=[-5,-3,-2,-1,-4];
weight=abs(goal)
//Linear Inequality constraints
A=[1,1 ; 1,1/4 ; 1,-1];
b=[2;1;1];
//We specify the linear equality constraints below.
Aeq = [1,-1; 2, 1];
beq =  [1;2];
//The upper and lower bounds for the objective function are defined in simple vectors as shown below.
lb = [-1;-%inf];
ub = [%inf;1];    //
//Nonlinear constraints are required to be defined as a single function with the inequality and equality constraints in separate vectors.
function [c,ceq]=nlc(x)
c=[x(1)^2-5,x(1)^2+x(2)^2-8];
ceq=[];
endfunction
//Run fgoalattain
[x,fval,attainfactor,exitflag,output,lambda]=fgoalattain(gattainObjfun,x0,goal,weight,A,b,Aeq,beq,lb,ub,nlc)
   ]]></programlisting>
</refsection>


<refsection>
   <title>Example</title>
   <para>
We can further enhance the functionality of fgoalattain by setting input options. We can pre-define the gradient of the objective function and/or the hessian of the lagrange function and thereby improve the speed of computation. This is elaborated on in example 6. We take the following problem, specify the gradients, and the jacobian matrix of the constraints. We also set solver parameters using the options.
</para>
<para>
<latex>
\begin{eqnarray}
1.5 + x_{1} \boldsymbol{\cdot} x_{2} - x_{1} - x_{2} &amp;\leq 0\\
-x_{1}\boldsymbol{\cdot} x_{2} - 10 &amp;\leq 0
\end{eqnarray}
</latex>
</para>
   <para>

   </para>
   <programlisting role="example"><![CDATA[
//Example 6: Using the available options
function f1 = gattainObjfun(x)
f1(1)=2*x(1)*x(1)+x(2)*x(2)-48*x(1)-40*x(2)+304
f1(2)=-x(1)*x(1)-3*x(2)*x(2)
f1(3)=x(1)+3*x(2)-18
f1(4)=-x(1)-x(2)
f1(5)=x(1)+x(2)-8
endfunction
// The initial guess
x0=[-1,1];
//Specifying the goal and the weights
goal=[-5,-3,-2,-1,-4];
weight=abs(goal)
// Defining gradient of myfun
function G = myfungrad(x)
G = [ 4*x(1) - 48, -2*x(1), 1, -1, 1;
2*x(2) - 40, -6*x(2), 3, -1, 1; ]'
endfunction
// The nonlinear constraints and the Jacobian
// matrix of the constraints
function [c,ceq] = confun(x)
// Inequality constraints
c = [1.5 + x(1)*x(2) - x(1) - x(2), -x(1)*x(2) - 10]
// No nonlinear equality constraints
ceq=[]
endfunction
// Defining gradient of confungrad
function [DC,DCeq] = cgrad(x)
// DC(:,i) = gradient of the i-th constraint
// DC = [
//   Dc1/Dx1  Dc1/Dx2
//   Dc2/Dx1  Dc2/Dx2
//   ]
DC= [
x(2)-1, -x(2)
x(1)-1, -x(1)
]'
DCeq = []'
endfunction
// Test with both gradient of objective and gradient of constraints
Options = list("MaxIter", [3000], "CpuTime", [600],"GradObj",myfungrad,"GradCon",cgrad);
// The initial guess

// Run fgoalattain
[x,fval,maxfval,exitflag,output] = fgoalattain(myfun,x0,goal,weight,[],[],[],[],[],[], confun, Options)
   ]]></programlisting>
</refsection>

<refsection>
   <title>Example</title>
Infeasible Problems: Find x in R^2 such that it minimizes the objective function used above under the following constraints:
<para>
<latex>
\begin{eqnarray}
&amp;x_{1}/3 - 5x_{2}&amp;= 11 
\\&amp;2x_{1} + x_{2}&amp;= 8
\\ \end{eqnarray}
</latex>
   </para>
<para>
</para>
   <programlisting role="example"><![CDATA[
//Example 7:
//Objective function
function f1 = gattainObjfun(x)
f1(1)=2*x(1)*x(1)+x(2)*x(2)-48*x(1)-40*x(2)+304
f1(2)=-x(1)*x(1)-3*x(2)*x(2)
f1(3)=x(1)+3*x(2)-18
f1(4)=-x(1)-x(2)
f1(5)=x(1)+x(2)-8
endfunction
// The initial guess
x0=[-1,1];
//Specifying goals and weights
goal=[-5,-3,-2,-1,-4];
weight=abs(goal)
//Linear Inequality constraints
A=[1,1 ; 1,1/4 ; 1,-1];
b=[2;1;1];
//We specify the linear equality constraints below.
Aeq = [1/3,-5; 2, 1];
beq =  [11;8];
// Run fminimax
[x,fval,maxfval,exitflag,output,lambda] = fgoalattain(gattainObjfun,x0,goal,weight,A,b,Aeq,beq)


   ]]></programlisting>
</refsection>

<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>Prajwala TM, Sheetal Shalini , 2015</member>
   </simplelist>
</refsection>
</refentry>

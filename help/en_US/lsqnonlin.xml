<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from lsqnonlin.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="lsqnonlin" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>lsqnonlin</refname>
<<<<<<< HEAD
    <refpurpose>Solves a non linear data fitting problems.</refpurpose>
=======
    <refpurpose>Solves a nonlinear data fitting problems.</refpurpose>
>>>>>>> 611a2eae153e83b49d73e0277def7c3f865b4eb3
  </refnamediv>


<refsynopsisdiv>
   <title>Calling Sequence</title>
   <synopsis>
   xopt = lsqnonlin(fun,x0)
   xopt = lsqnonlin(fun,x0,lb,ub)
   xopt = lsqnonlin(fun,x0,lb,ub,options)
   [xopt,resnorm] = lsqnonlin( ... )
   [xopt,resnorm,residual] = lsqnonlin( ... )
   [xopt,resnorm,residual,exitflag] = lsqnonlin( ... )
   [xopt,resnorm,residual,exitflag,output,lambda,gradient] = lsqnonlin( ... )
   
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Input Parameters</title>
   <variablelist>
   <varlistentry><term>fun :</term>
      <listitem><para> A function, representing the objective function and gradient (if given) of the problem.</para></listitem></varlistentry>
   <varlistentry><term>x0 :</term>
      <listitem><para> A vector of doubles, containing the starting values of variables of size (1 X n) or (n X 1) where 'n' is the number of variables.</para></listitem></varlistentry>
   <varlistentry><term>lb :</term>
      <listitem><para> A vector of doubles, containing the lower bounds of the variables of size (1 X n) or (n X 1) where 'n' is the number of variables.</para></listitem></varlistentry>
   <varlistentry><term>ub :</term>
      <listitem><para> A vector of doubles, containing the upper bounds of the variables of size (1 X n) or (n X 1) where 'n' is the number of variables.</para></listitem></varlistentry>
   <varlistentry><term>options :</term>
      <listitem><para> A list, containing the option for user to specify. See below for details.</para></listitem></varlistentry>
      </variablelist>
</refsection>
<refsection>
<title> Outputs</title>
 <variablelist>
   <varlistentry><term>xopt :</term>
      <listitem><para> A vector of doubles, containing the computed solution of the optimization problem.</para></listitem></varlistentry>
   <varlistentry><term>resnorm :</term>
      <listitem><para> A double, containing the objective value returned as a scalar value i.e. sum(fun(x).^2).</para></listitem></varlistentry>
   <varlistentry><term>residual :</term>
      <listitem><para> A vector of doubles, containing the solution of the objective function, returned as a vector i.e. fun(x).</para></listitem></varlistentry>
   <varlistentry><term>exitflag :</term>
      <listitem><para> An integer, containing the flag which denotes the reason for termination of algorithm. See below for details.</para></listitem></varlistentry>
   <varlistentry><term>output :</term>
      <listitem><para> A structure, containing the information about the optimization. See below for details.</para></listitem></varlistentry>
   <varlistentry><term>lambda :</term>
      <listitem><para> A structure, containing the Lagrange multipliers of the lower bounds, upper bounds and constraints at the optimized point. See below for details.</para></listitem></varlistentry>
   <varlistentry><term>gradient :</term>
      <listitem><para> A vector of doubles, containing the objective's gradient of the solution.</para></listitem></varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
<<<<<<< HEAD
Search the minimum of a constrained non-linear least square problem specified by :
=======
Search the minimum of a constrained nonlinear least square problem specified by :
>>>>>>> 611a2eae153e83b49d73e0277def7c3f865b4eb3
   </para>
   <para>
<latex>
\begin{eqnarray}
\hspace{1pt} &amp;\mbox{min}_{x}
\hspace{1pt} &amp; (f_{1}(x)^{2} + f_{2}(x)^{2} + f_{n}(x)^{2}) \\
\hspace{1pt} &amp; &amp; lb \leq x \leq ub \\
\end{eqnarray}
</latex>
   </para>
   <para>
<<<<<<< HEAD
lsqnonlin calls fmincon, which calls Ipopt, an optimization library written in C++ to solve the non-linear least squares problem.
=======
lsqnonlin calls fmincon, which calls Ipopt, an optimization library written in C++ to solve the nonlinear least squares problem.
>>>>>>> 611a2eae153e83b49d73e0277def7c3f865b4eb3
   </para>
   
   <para>
The options should be defined as type "list" and consist of the following fields:
</para>
  <para>
options= list("MaxIter", [---], "CpuTime", [---], "GradObj", ---);
   </para>
   <para>
<itemizedlist>
<listitem>MaxIter : A Scalar, specifying the maximum number of iterations that the solver should take.</listitem>
<listitem>CpuTime : A Scalar, specifying the maximum amount of CPU time in seconds that the solver should take.</listitem>
<listitem>GradObj : A string, representing whetherthe gradient function is on or off.</listitem>
</itemizedlist>
   </para>
   <para>
   The default values for the various items are given as:
   </para>
   <para>
Default Values : options = list("MaxIter", [3000], "CpuTime", [600], "GradObj", "off");
   </para>
    <para>
The exitflag allows the user to know the status of the optimization which is returned by Ipopt. The values it can take and what they indicate is described below:
<itemizedlist>
<listitem> 0 : Optimal Solution Found </listitem>
<listitem> 1 : Maximum Number of Iterations Exceeded. Output may not be optimal.</listitem>
<listitem> 2 : Maximum amount of CPU Time exceeded. Output may not be optimal.</listitem>
<listitem> 3 : Stop at Tiny Step.</listitem>
<listitem> 4 : Solved To Acceptable Level.</listitem>
<listitem> 5 : Converged to a point of local infeasibility.</listitem>
</itemizedlist>
   </para>
   <para>
For more details on exitflag, see the Ipopt documentation which can be found on http://www.coin-or.org/Ipopt/documentation/
   </para>
   <para>
The output data structure contains detailed information about the optimization process.
It is of type "struct" and contains the following fields.
<itemizedlist>
<listitem>output.iterations: The number of iterations performed.</listitem>
<listitem>output.constrviolation: The max-norm of the constraint violation.</listitem>
</itemizedlist>
</para>
    <para>
The lambda data structure contains the Lagrange multipliers at the end of optimization. In the current version, the values are returned only when the the solution is optimal.
It has type "struct" and contains the following fields.
<itemizedlist>
<listitem>lambda.lower: The Lagrange multipliers for the lower bound constraints.</listitem>
<listitem>lambda.upper: The Lagrange multipliers for the upper bound constraints.</listitem>
</itemizedlist>
   </para>
   <para>
</para>
</refsection>
<para>
A few examples displaying the various functionalities of lsqnonlin have been provided below. You will find a series of problems and the appropriate code snippets to solve them.
   </para>
<refsection>
   <title>Example</title>
     <para>
<<<<<<< HEAD
 Here we solve a simple non-linear least square example taken from leastsq default present in scilab.
=======
 Here we solve a simple nonlinear least square example taken from leastsq default present in scilab.
>>>>>>> 611a2eae153e83b49d73e0277def7c3f865b4eb3

   </para>
   <para>
Find x in R^2 such that it minimizes:
   </para>
   <para>
<latex>
  \begin{eqnarray}
\mbox{min}_{x}\ f(x) = sum_{i=1,...,n} &amp; wm_{i}^{2} (x_{1} \boldsymbol{\cdot} exp(-x_{2}\boldsymbol{\cdot} tm)) - ym_{i} )^{2}\\
\end{eqnarray}\\
\text{With initial values as: }\\
\begin{array}{cc}
[1.5 &amp; 0.8]
\end{array}
  </latex>
    </para>
   <programlisting role="example"><![CDATA[

// we have the m measures (ti, yi):
m = 10;
tm = [0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5]';
ym = [0.79, 0.59, 0.47, 0.36, 0.29, 0.23, 0.17, 0.15, 0.12, 0.08]';
// measure weights (here all equal to 1...)
wm = ones(m,1);
// and we want to find the parameters x such that the model fits the given
// data in the least square sense:
//
//  minimize  f(x) = sum_i  wm(i)^2 ( x(1)*exp(-x(2)*tm(i) - ym(i) )^2
// initial parameters guess
x0 = [1.5 ; 0.8];
// in the first examples, we define the function fun and dfun
// in scilab language
function y=myfun(x, them, ym, wm)
y = wm.*( x(1)*exp(-x(2)*tm) - ym )
endfunction
// the simplest call
[xopt,resnorm,residual,exitflag,output,lambda,gradient] = lsqnonlin(myfun,x0)
// Press ENTER to continue

   ]]></programlisting>
</refsection>
<refsection>
<title>Example</title>
<para>
  Here we build up on the previous example by adding upper and lower bounds to the variables.
We add the following bounds to the problem specified above:
  </para>
  <para>
  <latex>
\begin{eqnarray}
-5 &amp;\leq x_{1} &amp;\leq 10\\
-5 &amp;\leq x_{2} &amp;\leq 10\\
\end{eqnarray}
</latex>
  </para>
    <para>
  </para>
   <programlisting role="example"><![CDATA[
<<<<<<< HEAD
//A simple non-linear least square example taken from leastsq default present in scilab
=======
//A simple nonlinear least square example taken from leastsq default present in scilab
>>>>>>> 611a2eae153e83b49d73e0277def7c3f865b4eb3
function y=yth(t, x)
y  = x(1)*exp(-x(2)*t)
endfunction
// we have the m measures (ti, yi):
m = 10;
tm = [0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5]';
ym = [0.79, 0.59, 0.47, 0.36, 0.29, 0.23, 0.17, 0.15, 0.12, 0.08]';
// measure weights (here all equal to 1...)
wm = ones(m,1);
// and we want to find the parameters x such that the model fits the given
// data in the least square sense:
//
//  minimize  f(x) = sum_i  wm(i)^2 ( yth(tm(i),x) - ym(i) )^2
// initial parameters guess
x0 = [1.5 ; 0.8];
// in the first examples, we define the function fun and dfun
// in scilab language
function y=myfun(x, tm, ym, wm)
y = wm.*( yth(tm, x) - ym )
endfunction
lb = [-5 ,-5];
ub = [10, 10];
// the simplest call
[xopt,resnorm,residual,exitflag,output,lambda,gradient] = lsqnonlin(myfun,x0,lb,ub)
// Press ENTER to continue

   ]]></programlisting>
</refsection>

<refsection>
   <title>Example</title>
   <para>
  In this example, we further enhance the functionality of lsqnonlin by setting input options. This provides us with the ability to control the solver parameters such as the maximum number of solver iterations and the max. CPU time allowed for the computation.
  </para>
  <para>
  </para>
   <programlisting role="example"><![CDATA[
//A basic example taken from leastsq default present in scilab with gradient
function y=yth(t, x)
y  = x(1)*exp(-x(2)*t)
endfunction
// we have the m measures (ti, yi):
m = 10;
tm = [0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5]';
ym = [0.79, 0.59, 0.47, 0.36, 0.29, 0.23, 0.17, 0.15, 0.12, 0.08]';
// measure weights (here all equal to 1...)
wm = ones(m,1);
// and we want to find the parameters x such that the model fits the given
// data in the least square sense:
//
//  minimize  f(x) = sum_i  wm(i)^2 ( yth(tm(i),x) - ym(i) )^2
// initial parameters guess
x0 = [1.5 ; 0.8];
// in the first examples, we define the function fun and dfun
// in scilab language
function [y,dy]=myfun(x, tm, ym, wm)
y = wm.*( x(1)*exp(-x(2)*tm) - ym )
v = wm.*exp(-x(2)*tm)
dy = [v , -x(1)*tm.*v]
endfunction
lb = [-5,-5];
ub = [10,10];
options = list("GradObj", "on")
[xopt,resnorm,residual,exitflag,output,lambda,gradient] = lsqnonlin(myfun,x0,lb,ub,options)
   ]]></programlisting>
</refsection>

<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>Harpreet Singh</member>
   </simplelist>
</refsection>
</refentry>

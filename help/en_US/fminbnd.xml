<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from fminbnd.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="fminbnd" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>fminbnd</refname>
    <refpurpose>Solves a multi-variable optimization problem on a bounded interval</refpurpose>
  </refnamediv>


<refsection>
   <title>Parameters</title>
   <variablelist>
        <varlistentry>
            <term>f :</term>
            <listitem><para> a function, representing the objective function of the problem</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>x1 :</term>
            <listitem><para> a vector, containing the lower bound of the variables of size (1 X n) or (n X 1) where 'n' is the number of Variables, where n is number of Variables</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>x2 :</term>
            <listitem><para> a vector, containing the upper bound of the variables of size (1 X n) or (n X 1) or (0 X 0) where 'n' is the number of Variables. If x2 is empty it means upper bound is +infinity</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>options :</term>
            <listitem><para> a list, containing the option for user to specify. See below for details.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>xopt :</term>
            <listitem><para> a vector of doubles, containing the the computed solution of the optimization problem.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>fopt :</term>
            <listitem><para> a scalar of double, containing the the function value at x.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>exitflag :</term>
            <listitem><para> a scalar of integer, containing the flag which denotes the reason for termination of algorithm. See below for details.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>output :</term>
            <listitem><para> a structure, containing the information about the optimization. See below for details.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term>lambda :</term>
            <listitem><para> a structure, containing the Lagrange multipliers of lower bound and upper bound at the optimized point. See below for details.</para></listitem>
        </varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
Search the minimum of a multi-variable function on bounded interval specified by :
Find the minimum of f(x) such that
   </para>
   <para>
<latex>
\begin{eqnarray}
&amp;\mbox{min}_{x}
&amp; f(x)\\
&amp; \text{subject to} &amp; x1 \ &lt; x \ &lt; x2 \\
\end{eqnarray}
</latex>
   </para>
   <para>
The routine calls Ipopt for solving the Bounded Optimization problem, Ipopt is a library written in C++.
   </para>
   <para>
The options allows the user to set various parameters of the Optimization problem.
It should be defined as type "list" and contains the following fields.
<itemizedlist>
<listitem>Syntax : options= list("MaxIter", [---], "CpuTime", [---], "TolX", [----]);</listitem>
<listitem>MaxIter : a Scalar, containing the Maximum Number of Iteration that the solver should take.</listitem>
<listitem>CpuTime : a Scalar, containing the Maximum amount of CPU Time that the solver should take.</listitem>
<listitem>TolX : a Scalar, containing the Tolerance value that the solver should take.</listitem>
<listitem>Default Values : options = list("MaxIter", [3000], "CpuTime", [600], TolX, [1e-4]);</listitem>
</itemizedlist>
   </para>
   <para>
The exitflag allows to know the status of the optimization which is given back by Ipopt.
<itemizedlist>
<listitem>exitflag=0 : Optimal Solution Found </listitem>
<listitem>exitflag=1 : Maximum Number of Iterations Exceeded. Output may not be optimal.</listitem>
<listitem>exitflag=2 : Maximum CPU Time exceeded. Output may not be optimal.</listitem>
<listitem>exitflag=3 : Stop at Tiny Step.</listitem>
<listitem>exitflag=4 : Solved To Acceptable Level.</listitem>
<listitem>exitflag=5 : Converged to a point of local infeasibility.</listitem>
</itemizedlist>
   </para>
   <para>
For more details on exitflag see the ipopt documentation, go to http://www.coin-or.org/Ipopt/documentation/
   </para>
   <para>
The output data structure contains detailed informations about the optimization process.
It has type "struct" and contains the following fields.
<itemizedlist>
<listitem>output.Iterations: The number of iterations performed during the search</listitem>
<listitem>output.Cpu_Time: The total cpu-time spend during the search</listitem>
<listitem>output.Objective_Evaluation: The number of Objective Evaluations performed during the search</listitem>
<listitem>output.Dual_Infeasibility: The Dual Infeasiblity of the final soution</listitem>
<listitem>output.Message: The output message for the problem</listitem>
</itemizedlist>
   </para>
   <para>
The lambda data structure contains the Lagrange multipliers at the end
of optimization. In the current version the values are returned only when the the solution is optimal.
It has type "struct" and contains the following fields.
<itemizedlist>
<listitem>lambda.lower: The Lagrange multipliers for the lower bound constraints.</listitem>
<listitem>lambda.upper: The Lagrange multipliers for the upper bound constraints.</listitem>
</itemizedlist>
   </para>
   <para>
</para>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//Find x in R^6 such that it minimizes:
//f(x)= sin(x1) + sin(x2) + sin(x3) + sin(x4) + sin(x5) + sin(x6)
//-2 <= x1,x2,x3,x4,x5,x6 <= 2
//Objective function to be minimised
function y=f(x)
y=0
for i =1:6
y=y+sin(x(i));
end
endfunction
//Variable bounds
x1 = [-2, -2, -2, -2, -2, -2];
x2 = [2, 2, 2, 2, 2, 2];
//Options
options=list("MaxIter",[1500],"CpuTime", [100],"TolX",[1e-6])
//Calling Ipopt
[x,fval] =fminbnd(f, x1, x2, options)
// Press ENTER to continue

   ]]></programlisting>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//Find x in R such that it minimizes:
//f(x)= 1/x^2
//0 <= x <= 1000
//Objective function to be minimised
function y=f(x)
y=1/x^2
endfunction
//Variable bounds
x1 = [0];
x2 = [1000];
//Calling Ipopt
[x,fval,exitflag,output,lambda] =fminbnd(f, x1, x2)
// Press ENTER to continue

   ]]></programlisting>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//The below problem is an unbounded problem:
//Find x in R^2 such that it minimizes:
//f(x)= -[(x1-1)^2 + (x2-1)^2]
//-inf <= x1,x2 <= inf
//Objective function to be minimised
function y=f(x)
y=-((x(1)-1)^2+(x(2)-1)^2);
endfunction
//Variable bounds
x1 = [-%inf , -%inf];
x2 = [];
//Options
options=list("MaxIter",[1500],"CpuTime", [100],"TolX",[1e-6])
//Calling Ipopt
[x,fval,exitflag,output,lambda] =fminbnd(f, x1, x2, options)
   ]]></programlisting>
</refsection>

<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>R.Vidyadhar , Vignesh Kannan</member>
   </simplelist>
</refsection>
</refentry>
